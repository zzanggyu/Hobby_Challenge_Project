<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hobby.challenge.fobackend.mapper.NotificationMapper">
    
    <!-- ResultMap 정의 -->
    <resultMap id="NotificationMap" type="com.hobby.challenge.fobackend.dto.NotificationResponseDTO">
        <id column="NOTIFICATION_ID" property="id"/>
        <result column="USER_ID" property="userId"/>
        <result column="TYPE" property="type"/>
        <result column="IS_READ" property="read" javaType="boolean"/>
        <result column="CREATED_DATE" property="createdAt"/>
        <result column="CHALLENGE_ID" property="targetId"/>
        <result column="CHALLENGE_TITLE" property="challengeTitle"/>
        <result column="PARTICIPANT_NICKNAME" property="participantNickname"/>
        <result column="target_type" property="targetType"/>
        <result column="title" property="title"/>
        <result column="message" property="message"/>
    </resultMap>

    <!-- 알림 목록 조회 (관련 정보 조인) - 수정된 버전 -->
    <select id="findByUserId" resultMap="NotificationMap">
        SELECT n.NOTIFICATION_ID
             , n.USER_ID
             , n.TYPE
             , n.IS_READ
             , n.CREATED_DATE
             , n.CHALLENGE_ID
             , n.CERT_ID
             
             <!-- 알림 제목 생성 -->
             , (CASE 
                    WHEN n.TYPE = 'CHALLENGE_REQUEST' THEN '새로운 참여 요청'
                    WHEN n.TYPE = 'CHALLENGE_REQUEST_APPROVED' THEN '참여 승인'
                    WHEN n.TYPE = 'CHALLENGE_REQUEST_REJECTED' THEN '참여 거절'
                    WHEN n.TYPE = 'NEW_CERT' THEN '새로운 인증'
                    WHEN n.TYPE = 'NEW_COMMENT' THEN '새로운 댓글'
                    WHEN n.TYPE = 'NEW_LIKE' THEN '좋아요'
                    WHEN n.TYPE = 'CHALLENGE_STARTING_SOON' THEN '챌린지 시작 예정'
                    WHEN n.TYPE = 'CHALLENGE_STARTED' THEN '챌린지 시작됨'
                    WHEN n.TYPE = 'CHALLENGE_ENDING_SOON' THEN '챌린지 종료 예정'
                    WHEN n.TYPE = 'CHALLENGE_ENDED' THEN '챌린지 종료됨'
                    ELSE '알림'
                END) AS title
                
             <!-- 알림 메시지 생성 -->
             , (CASE 
                    WHEN n.TYPE = 'CHALLENGE_REQUEST' THEN 
                        CONCAT(pu.NICKNAME, '님이 "', c.TITLE, '" 챌린지 참여를 요청했습니다.')
                    WHEN n.TYPE = 'CHALLENGE_REQUEST_APPROVED' THEN 
                        CONCAT('"', c.TITLE, '" 챌린지 참여가 승인되었습니다!')
                    WHEN n.TYPE = 'CHALLENGE_REQUEST_REJECTED' THEN 
                        CONCAT('"', c.TITLE, '" 챌린지 참여가 거절되었습니다.')
                    WHEN n.TYPE = 'NEW_CERT' THEN 
                        CONCAT(cu.NICKNAME, '님이 "', c.TITLE, '" 챌린지에 새로운 인증을 등록했습니다.')
                    WHEN n.TYPE = 'NEW_COMMENT' THEN 
                        '인증에 새로운 댓글이 작성되었습니다.'
                    WHEN n.TYPE = 'NEW_LIKE' THEN 
                        '누군가 당신의 인증에 좋아요를 눌렀습니다.'
                    WHEN n.TYPE = 'CHALLENGE_STARTING_SOON' THEN 
                        CONCAT('"', c.TITLE, '" 챌린지가 내일 시작됩니다! 준비하세요')
                    WHEN n.TYPE = 'CHALLENGE_STARTED' THEN 
                        CONCAT('"', c.TITLE, '" 챌린지가 시작되었습니다! 첫 인증을 등록해보세요')
                    WHEN n.TYPE = 'CHALLENGE_ENDING_SOON' THEN 
                        CONCAT('"', c.TITLE, '" 챌린지가 내일 후 종료됩니다. 마지막 스퍼트!')
                    WHEN n.TYPE = 'CHALLENGE_ENDED' THEN 
                        CONCAT('"', c.TITLE, '" 챌린지가 종료되었습니다. 수고하셨습니다!')
                    ELSE '새로운 알림이 있습니다.'
                END) AS message
                
             <!-- targetType 결정 -->
             , (CASE 
                    WHEN n.CHALLENGE_ID IS NOT NULL THEN 'challenge'
                    WHEN n.CERT_ID IS NOT NULL THEN 'certification'
                    ELSE NULL
                END) AS target_type
                
             <!-- targetId 결정 (챌린지 관련이면 challenge_id, 인증 관련이면 cert_id) -->
             , (CASE 
                    WHEN n.CHALLENGE_ID IS NOT NULL THEN n.CHALLENGE_ID
                    WHEN n.CERT_ID IS NOT NULL THEN n.CERT_ID
                    ELSE NULL
                END) AS target_id
                
             <!-- 관련 정보 -->
             , c.TITLE AS CHALLENGE_TITLE
             , pu.NICKNAME AS PARTICIPANT_NICKNAME
             
          FROM NOTIFICATION n
          
        <!-- 챌린지 정보 조인 -->
     LEFT JOIN CHALLENGE c ON n.CHALLENGE_ID = c.CHALLENGE_ID
        
        <!-- 참여자 정보 조인 (참여 요청 알림의 경우) -->
     LEFT JOIN PARTICIPATION p ON n.PARTICIPATION_ID = p.PARTICIPATION_ID
     LEFT JOIN USER pu ON p.USER_ID = pu.USER_ID
        
        <!-- 인증 작성자 정보 조인 (인증 관련 알림의 경우) -->
     LEFT JOIN CERTIFICATION cert ON n.CERT_ID = cert.CERTIFICATION_ID
     LEFT JOIN USER cu ON cert.CREATED_BY = cu.USER_ID
        
         WHERE n.USER_ID = #{userId}
      ORDER BY n.CREATED_DATE DESC
         LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 읽지 않은 알림 개수 -->
    <select id="countUnreadByUserId" resultType="int">
        SELECT COUNT(*)
          FROM NOTIFICATION
         WHERE USER_ID = #{userId} AND IS_READ = 0
    </select>

    <!-- 알림 읽음 처리 -->
    <update id="markAsRead">
        UPDATE NOTIFICATION 
           SET IS_READ = 1
         WHERE NOTIFICATION_ID = #{notificationId} AND USER_ID = #{userId}
    </update>

    <!-- 모든 알림 읽음 처리 -->
    <update id="markAllAsRead">
        UPDATE NOTIFICATION 
           SET IS_READ = 1
         WHERE USER_ID = #{userId}
    </update>

    <!-- 새 알림 생성 -->
    <insert id="insertNotification" parameterType="com.hobby.challenge.fobackend.entity.Notification">
        INSERT 
         INTO NOTIFICATION (USER_ID 
            			 , CHALLENGE_ID 
				         , PARTICIPATION_ID
				         , CERT_ID
				         , TYPE 
				         , IS_READ
		          ) VALUES (#{userId} 
				         , #{challengeId} 
				         , #{participationId} 
				         , #{certId}
				         , #{type}
				         , 0
				         )
    </insert>
</mapper>