<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
         "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hobby.challenge.fobackend.mapper.ChallengeMapper">

	<!-- 챌린지 생성 -->
	<insert id="insertChallenge"
			parameterType="com.hobby.challenge.fobackend.entity.Challenge"
			useGeneratedKeys="true"
			keyProperty="challengeId">
		INSERT INTO CHALLENGE (TITLE
							, DESCRIPTION
							, START_DATE
							, END_DATE
							, CATEGORY_ID
							, CREATED_BY)
		VALUES (#{title}
			 , #{description}
			 , #{startDate}
			 , #{endDate}
			 , #{categoryId}
			 , #{createdBy})
	</insert>

	<!-- Challenge User 조인용 resultMap-->
 	<resultMap id="ChallengeWithCreator" type="com.hobby.challenge.fobackend.entity.Challenge">
	    <id column="challengeId" property="challengeId"/>
	    <result column="title" property="title"/>
	    <result column="description" property="description"/>
	    <result column="startDate" property="startDate"/>
	    <result column="endDate" property="endDate"/>
	    <result column="categoryId" property="categoryId"/>
	    <result column="createdBy" property="createdBy"/>
	    <result column="createdDate" property="createdDate"/>
	    <result column="modifiedDate" property="modifiedDate"/>
	    <result column="isFavorite" property="isFavorite"/>
	    
	    <!-- CREATED_BY로 USER 테이블(USER_ID)와 조인 -->
		<association property="creator" javaType="com.hobby.challenge.fobackend.entity.User">
			<id column="userId" property="userId"/>
      		<result column="nickname" property="nickname"/>
    	</association>
 	</resultMap>
 	
 	<!-- 페이징 -->
 	<!-- 동적 쿼리 xml태그 추가해 제목 검색 또는 카테고리 검색  -->
 	<select id="findAllWithPaging" resultMap="ChallengeWithCreator">
	    SELECT C.CHALLENGE_ID AS challengeId
      		 , C.TITLE AS title
      		 , C.DESCRIPTION AS description
      		 , C.CATEGORY_ID AS categoryId
      		 , C.CREATED_BY AS createdBy
      		 , C.START_DATE AS startDate
      		 , C.END_DATE AS endDate
      		 , C.CREATED_DATE createdDate
      		 , C.MODIFIED_DATE modifiedDate
	         , CASE WHEN FC.USER_ID IS NOT NULL THEN TRUE ELSE FALSE END AS isFavorite <!-- 가상 컬럼 생성 관심 챌린지 여부-->
	         , U.USER_ID AS userId
  			 , U.NICKNAME AS nickname
	      FROM CHALLENGE C
	 LEFT JOIN FAVORITE_CHALLENGE FC 
	 	    ON C.CHALLENGE_ID = FC.CHALLENGE_ID 
	 	   AND FC.USER_ID = #{userId}
    INNER JOIN USER U
  			ON C.CREATED_BY = U.USER_ID
	   <where>
	   		 (C.IS_DELETED = 0 OR C.IS_DELETED IS NULL) <!-- 소프트 딜리트 되지 않은 챌린지만 조회 -->
			<if test="search != null and search.trim() != ''">
				AND C.TITLE LIKE CONCAT('%', #{search}, '%')
		   </if>
			<if test="categoryId != null">
				AND C.CATEGORY_ID = #{categoryId}
		   </if>
	   </where>
	  ORDER BY C.CREATED_DATE DESC
	     LIMIT #{size} OFFSET #{offset}
	</select>
	
	<!-- 전체 챌린지 개수 페이지 수 계산을 위해 -->
	<select id="countAll" resultType="int">
	    SELECT COUNT(*) 
	      FROM CHALLENGE C
	    <where>
	       (C.IS_DELETED = 0 OR C.IS_DELETED IS NULL) <!-- 소프트 딜리트 되지 않은 챌린지만 조회 -->
	      <if test="search != null and search.trim() != ''">
	        AND C.TITLE LIKE CONCAT('%', #{search}, '%')
	      </if>
	      <if test="categoryId != null">
	        AND C.CATEGORY_ID = #{categoryId}
	      </if>
	    </where>
	</select>

	<!-- 전체 챌린지 목록 조회 -->
	<select id="findAll" resultMap="ChallengeWithCreator">
		SELECT C.CHALLENGE_ID AS challengeId
			 , C.TITLE AS title
			 , C.DESCRIPTION AS description
			 , C.CATEGORY_ID AS categoryId
			 , C.CREATED_BY AS createdBy
			 , C.START_DATE AS startDate
			 , C.END_DATE AS endDate
			 , C.CREATED_DATE AS createdDate
			 , C.MODIFIED_DATE AS modifiedDate
			 , U.USER_ID AS userId
			 , U.NICKNAME AS nickname <!-- 생성자 닉네임 -->
		  FROM CHALLENGE C
	INNER JOIN USER U 
			ON C.CREATED_BY = U.USER_ID
	   	 WHERE (C.IS_DELETED = 0 OR C.IS_DELETED IS NULL) <!-- 소프트 딜리트 되지 않은 챌린지만 조회 -->
	  ORDER BY C.CREATED_DATE DESC
	</select>
	
    <!-- 단건 조회 내가 참여한 챌린지-->
    <select id="selectById"
        	resultMap="ChallengeWithCreator">
	    SELECT C.CHALLENGE_ID AS challengeId
	         , C.TITLE AS title
	         , C.DESCRIPTION AS description
	         , C.START_DATE AS startDate
	         , C.END_DATE AS endDate
	         , C.CATEGORY_ID AS categoryId
	         , C.CREATED_BY AS createdBy
	         , C.CREATED_DATE AS createdDate
	         , C.MODIFIED_DATE AS modifiedDate
	         , C.IS_DELETED AS isDeleted
	         , CASE WHEN FC.USER_ID IS NOT NULL THEN TRUE ELSE FALSE END AS isFavorite
	         , U.USER_ID AS userId
	         , U.NICKNAME AS nickname
	      FROM CHALLENGE C
     LEFT JOIN FAVORITE_CHALLENGE FC 
	        ON C.CHALLENGE_ID = FC.CHALLENGE_ID AND FC.USER_ID = #{userId}
    INNER JOIN USER U 
	        ON C.CREATED_BY = U.USER_ID
	     WHERE C.CHALLENGE_ID = #{challengeId}
	</select>
	


	
	 <!-- 상세 화면용 DTO 매핑 -->
	<resultMap id="DetailMap" type="com.hobby.challenge.fobackend.dto.ChallengeDetailDTO">
	    <id column="challengeId" property="challengeId"/>
	    <result column="title" property="title"/>
	    <result column="description" property="description"/>
	    <result column="startDate" property="startDate"/>
	    <result column="endDate" property="endDate"/>
	    <result column="categoryId" property="categoryId"/>
	    <result column="isFavorite" property="isFavorite"/>
	    <result column="joined" property="joined"/>
	    <result column="creatorNickname" property="creatorNickname"/>
	 </resultMap>
	 
	   <!-- 상세 조회 쿼리 -->
	 <select id="selectDetailById" 
	 		 resultMap="DetailMap">
	    SELECT C.CHALLENGE_ID AS challengeId
	         , C.TITLE AS title
	         , C.DESCRIPTION AS description
	         , C.START_DATE AS startDate
	         , C.END_DATE AS endDate
	         , C.CATEGORY_ID AS categoryId
	         , C.CREATED_BY AS createdBy
	         , CASE WHEN FC.USER_ID IS NOT NULL THEN TRUE ELSE FALSE END AS isFavorite
	         , CASE WHEN EXISTS (
	                SELECT 1 
	                  FROM PARTICIPATION P
	                 WHERE P.CHALLENGE_ID = C.CHALLENGE_ID
	                   AND P.USER_ID = #{userId}
	                   AND P.STATUS = 'APPROVED'
	                ) THEN TRUE ELSE FALSE END AS joined
	         , U.NICKNAME AS creatorNickname
	      FROM CHALLENGE C
	 LEFT JOIN FAVORITE_CHALLENGE FC
	        ON C.CHALLENGE_ID = FC.CHALLENGE_ID
	       AND FC.USER_ID = #{userId}
	INNER JOIN USER U
	        ON C.CREATED_BY = U.USER_ID
	     WHERE C.CHALLENGE_ID = #{challengeId}
	</select>
	
	<!-- 사용자의 활성 챌린지 개수 조회 챌린지 생성 하나만 하게 하기 위함-->
	<select id="countByCreator"
			parameterType="int"
			resultType="int">
			
		SELECT COUNT(*)
		  FROM CHALLENGE
		 WHERE CREATED_BY = #{userId}
		   AND (IS_DELETED = 0 OR IS_DELETED IS NULL)
		
	</select>
	
	<!-- 참여한 챌린지 조회용 ResultMap (상태 포함) -->
	<resultMap id="ChallengeWithStatus" type="com.hobby.challenge.fobackend.entity.Challenge" extends="ChallengeWithCreator">
	    <result column="challengeStatus" property="challengeStatus"/>
	</resultMap>

	<!-- 참여한 챌린지 목록 조회 (만료된 것도 포함) -->
	<select id="findByParticipation" resultMap="ChallengeWithStatus">
	    SELECT C.CHALLENGE_ID AS challengeId
	         , C.TITLE AS title
	         , C.DESCRIPTION AS description
	         , C.CATEGORY_ID AS categoryId
	         , C.CREATED_BY AS createdBy
	         , C.START_DATE AS startDate
	         , C.END_DATE AS endDate
	         , C.CREATED_DATE createdDate
	         , C.MODIFIED_DATE modifiedDate
	         , C.IS_DELETED AS isDeleted
	         , CASE WHEN FC.USER_ID IS NOT NULL THEN TRUE ELSE FALSE END AS isFavorite
	         , U.USER_ID AS userId
	         , U.NICKNAME AS nickname
	         , CASE 
	               WHEN C.IS_DELETED = 1 THEN 'EXPIRED'
	               WHEN C.END_DATE &lt; CURDATE() THEN 'EXPIRED' 
	               WHEN C.START_DATE > CURDATE() THEN 'UPCOMING'
	               ELSE 'ACTIVE'
	           END AS challengeStatus
	      FROM CHALLENGE C
	 LEFT JOIN FAVORITE_CHALLENGE FC 
	        ON C.CHALLENGE_ID = FC.CHALLENGE_ID 
	       AND FC.USER_ID = #{userId}
	INNER JOIN USER U
	        ON C.CREATED_BY = U.USER_ID
	     WHERE C.CHALLENGE_ID IN 
	           <foreach collection="challengeIds" item="id" open="(" close=")" separator=",">
	               #{id}
	           </foreach>
	  ORDER BY C.CREATED_DATE DESC
	</select>
	
	<!-- 인기 챌린지 조회 (좋아요 많은 순, 동률이면 최신순) -->
	<select id="findPopularChallenges" resultMap="ChallengeWithCreator">
	    SELECT C.CHALLENGE_ID AS challengeId
	         , C.TITLE AS title
	         , C.DESCRIPTION AS description
	         , C.CATEGORY_ID AS categoryId
	         , C.CREATED_BY AS createdBy
	         , C.START_DATE AS startDate
	         , C.END_DATE AS endDate
	         , C.CREATED_DATE AS createdDate
	         , C.MODIFIED_DATE AS modifiedDate
	         , CASE WHEN FC.USER_ID IS NOT NULL THEN TRUE ELSE FALSE END AS isFavorite
	         , U.USER_ID AS userId
	         , U.NICKNAME AS nickname
	         , (SELECT COUNT(*) 
	              FROM FAVORITE_CHALLENGE FC2 
	             WHERE FC2.CHALLENGE_ID = C.CHALLENGE_ID) AS favoriteCount
	      FROM CHALLENGE C
	 LEFT JOIN FAVORITE_CHALLENGE FC 
	        ON C.CHALLENGE_ID = FC.CHALLENGE_ID 
	       AND FC.USER_ID = #{userId}
	INNER JOIN USER U
	        ON C.CREATED_BY = U.USER_ID
	     WHERE (C.IS_DELETED = 0 OR C.IS_DELETED IS NULL)
	       AND C.END_DATE >= CURDATE() <!-- 진행중이거나 예정인 챌린지만 -->
	  ORDER BY favoriteCount DESC, C.CREATED_DATE DESC <!-- 좋아요 많은 순, 동률이면 최신순 -->
	     LIMIT #{size}
	</select>
	
	<!-- 챌린지 수정 챌린지 생성자만 가능 -->
	<update id="updateChallenge"
        	parameterType="com.hobby.challenge.fobackend.entity.Challenge">
	    UPDATE CHALLENGE
	       SET TITLE = #{title},
	           DESCRIPTION = #{description},
	           START_DATE = #{startDate},
	           END_DATE = #{endDate},
	           CATEGORY_ID = #{categoryId},
	           MODIFIED_DATE = CURRENT_TIMESTAMP
	     WHERE CHALLENGE_ID = #{challengeId}
	</update>
	
    <!-- 만료된 챌린지 소프트 삭제 -->
    <update id="softDeleteExpiredChallenges" parameterType="date">
        UPDATE CHALLENGE
           SET IS_DELETED = 1
             , MODIFIED_DATE = NOW()
         WHERE #{today} > END_DATE  
           AND (IS_DELETED = 0 OR IS_DELETED IS NULL)
    </update>
    
     <!-- 챌린지 하드 삭제 (물리적 삭제) -->
    <delete id="hardDeleteChallenge" parameterType="int">
        DELETE FROM CHALLENGE 
        WHERE CHALLENGE_ID = #{challengeId}
          AND (IS_DELETED = 0 OR IS_DELETED IS NULL)
    </delete>
</mapper>